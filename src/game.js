//@ sourceMappingURL=game.map
// Generated by CoffeeScript 1.6.1
(function() {
  'use strict';
  var Game, StatusMessages, fades, setupRandom;

  fades = [[66, 66, 66], [128, 128, 128], [255, 255, 255]];

  StatusMessages = (function() {

    StatusMessages.prototype.limit = 3;

    function StatusMessages(node) {
      this.node = node;
      this.messages = [];
    }

    StatusMessages.prototype.addStatus = function(msg) {
      var color, div, i, node, visibleMessages, _i, _len, _ref, _results;
      this.messages.push({
        text: msg,
        color: [255, 255, 255]
      });
      div = document.createElement('div');
      div.appendChild(document.createTextNode(msg));
      this.node.appendChild(div);
      while (this.node.childNodes.length > this.limit) {
        this.node.removeChild(this.node.childNodes[0]);
      }
      visibleMessages = this.messages.slice(-this.limit);
      _ref = this.node.childNodes;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        node = _ref[i];
        color = ROT.Color.multiply(visibleMessages[i].color, fades[i]);
        _results.push(node.setAttribute('style', 'color: %s;'.format(ROT.Color.toRGB(color))));
      }
      return _results;
    };

    return StatusMessages;

  })();

  Game = (function() {

    Game.prototype.display = null;

    Game.prototype.map = {};

    Game.prototype.engine = null;

    Game.prototype.player = null;

    Game.prototype.pedro = null;

    Game.prototype.ananas = null;

    Game.prototype.actors = [];

    function Game() {
      var displayNode;
      setupRandom();
      this.displaywidth = 50;
      this.displayheight = 25;
      this.display = new ROT.Display({
        fontFamily: "Monaco",
        fontSize: 21,
        spacing: 1.1,
        width: this.displaywidth,
        height: this.displayheight
      });
      displayNode = this.display.getContainer();
      document.getElementById('display').appendChild(displayNode);
      this.engine = new ROT.Engine();
      this.levelDepth = 0;
      this.levels = {};
      this.switchLevel(1, {
        noUpStairs: true
      });
      this.statusMessages = new StatusMessages(document.getElementById('status'));
      this.addStatus('You enter the funhouse.');
      this.addStatus('The exit slams shut behind you.');
      this.addStatus('Good luck!');
      this.engine.start();
    }

    Game.prototype.switchLevel = function(delta, opts) {
      var needWakeup, x, y, _ref,
        _this = this;
      this.levelDepth += delta;
      this.level = this.levels[this.levelDepth];
      this.engine.clear();
      needWakeup = false;
      if (this.level == null) {
        if (opts == null) {
          opts = {};
        }
        opts.addActor = function(actor) {
          return _this.engine.addActor(actor);
        };
        opts.removeActor = function(actor) {
          return _this.engine.removeActor(actor);
        };
        opts.depth = this.levelDepth;
        this.level = new Level(this, opts);
        this.levels[this.levelDepth] = this.level;
      } else {
        this.level.wakeUpActors();
      }
      _ref = this.level.entryPosition(delta), x = _ref[0], y = _ref[1];
      if (this.player == null) {
        this.player = new Player(this.level, x, y);
        this.camera = new Camera(this.player, this.displaywidth, this.displayheight);
      } else {
        this.player.moveToLevel(this.level, x, y);
      }
      this.level.setCamera(this.camera);
      return this.display.clear();
    };

    Game.prototype.addStatus = function(msg) {
      return this.statusMessages.addStatus(msg);
    };

    Game.prototype.updateLegend = function(visibleEntities) {
      var legend;
      legend = document.getElementById('legend');
      return updateLegendNodes(legend, visibleEntities);
    };

    Game.prototype.lock = function() {
      this.level.draw();
      this.updateLegend(this.level.visibleEntities());
      return this.engine.lock();
    };

    Game.prototype.unlock = function() {
      return this.engine.unlock();
    };

    return Game;

  })();

  window.Game = Game;

  setupRandom = function() {
    var seed, url;
    if ((seed = queryInt('seed')) != null) {
      ROT.RNG.setSeed(seed);
    }
    url = "http://localhost/?seed=" + ROT.RNG.getSeed();
    return $("#debug").append($("<a>").attr('href', url).text(url));
  };

}).call(this);
