//@ sourceMappingURL=ui.map
// Generated by CoffeeScript 1.6.1
(function() {
  var $, entitySpan, inventoryText, itemDescWithQuantity, legendLabel, props, removeAllChildren, showItemDetail, sortedBucketed, uiConstants, updateEntityStatus;

  $ = Zepto;

  uiConstants = {
    shakeEffectDuration: 400
  };

  legendLabel = function(entity, prop) {
    var label;
    label = prop.label;
    if (typeof label === 'string') {
      return label;
    } else {
      return label(entity);
    }
  };

  props = {
    bar: function(entity, prop, parentNode) {
      var bar, bottom, classname, later, meter, meterName, name, node, percentage, text, top, wasNew;
      if ((meterName = prop.meter) != null) {
        meter = entity[meterName];
        name = meterName;
        top = meter.value;
        bottom = meter.max;
      } else {
        name = prop.attr;
        top = entity[prop.attr];
        assert(top != null, "entity %s missing expected \"%s\"".format(entity, prop.attr));
        bottom = entity[prop.maxAttr];
        assert(bottom != null, "entity %s missing expected \"%s\"".format(entity, prop.maxAttr));
      }
      percentage = Math.min(1, top / bottom) * 100;
      classname = 'prop-' + name;
      node = $(parentNode).children('.' + classname);
      wasNew = false;
      if (!node.length) {
        node = $("<div>").addClass('progress').addClass(classname);
        bar = $("<div>").addClass('bar').appendTo(node);
        text = $("<div>").addClass('text').appendTo(node);
        wasNew = true;
      } else {
        bar = node.children('.bar');
        text = node.children('.text');
      }
      text.text(legendLabel(entity, prop));
      if (prop.color != null) {
        bar.css('background', prop.color);
      }
      later = function() {
        return bar.css('width', percentage + '%');
      };
      if (wasNew) {
        later();
        later = void 0;
      }
      return [node[0], later];
    }
  };

  removeAllChildren = function(node) {
    var _results;
    _results = [];
    while (node.childNodes.length) {
      _results.push(node.removeChild(node.childNodes[0]));
    }
    return _results;
  };

  updateEntityStatus = function(node, entity) {
    var state, stateNode;
    node = $(node);
    if (!(state = entity.state)) {
      return node.children('.entity-state').remove();
    }
    if ((stateNode = node.children('.entity-state')).length === 0) {
      stateNode = $("<div>").addClass('entity-state');
    }
    stateNode.appendTo(node);
    return stateNode.text('(%s)'.format(state));
  };

  entitySpan = function(entity) {
    var charSpan;
    charSpan = document.createElement('span');
    if (entity.color) {
      charSpan.setAttribute('style', 'color: %s;'.format(entity.color));
    }
    charSpan.textContent = entity.char;
    return charSpan;
  };

  window.updateLegendNodeForEntity = function(node, entity) {
    var header, headerText, later, prop, propFunc, propNode, remove, _i, _len, _ref, _ref1, _ref2;
    header = $(node).children('.entity-header');
    if (!header.length) {
      header = $("<div>").addClass('entity-header').appendTo(node);
    }
    removeAllChildren(header[0]);
    header.append(entitySpan(entity));
    headerText = ": %s".format(entity.legendDesc || entity.constructor.name);
    header.append(document.createTextNode(headerText));
    node.appendChild(header[0]);
    if ((_ref = entity.effect) != null ? _ref.damage : void 0) {
      entity.effect.damage = 0;
      $(node).addClass('shake');
      remove = function() {
        return $(node).removeClass('shake');
      };
      setTimeout(remove, uiConstants.shakeEffectDuration);
    }
    _ref1 = entity.legendProps || [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      prop = _ref1[_i];
      propFunc = props[prop.type];
      _ref2 = propFunc(entity, prop, node), propNode = _ref2[0], later = _ref2[1];
      node.appendChild(propNode);
      if (later) {
        setTimeout(later, 0);
      }
    }
    return updateEntityStatus(node, entity);
  };

  window.updateLegendNodes = function(legendNode, entitiesToShow) {
    var allNodes, entity, id, n, node, seen, toDelete, _i, _j, _len, _len1, _results;
    allNodes = $(legendNode).children('div');
    seen = {};
    for (_i = 0, _len = entitiesToShow.length; _i < _len; _i++) {
      entity = entitiesToShow[_i].entity;
      id = 'entity-' + entity.guid;
      node = document.getElementById(id) || $('<div>').attr('id', id).addClass('legend-entry')[0];
      legendNode.appendChild(node);
      updateLegendNodeForEntity(node, entity);
      seen[id] = true;
    }
    toDelete = (function() {
      var _j, _len1, _ref, _results;
      _ref = legendNode.children;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        n = _ref[_j];
        if (!seen[n.getAttribute('id')]) {
          _results.push(n);
        }
      }
      return _results;
    })();
    _results = [];
    for (_j = 0, _len1 = toDelete.length; _j < _len1; _j++) {
      n = toDelete[_j];
      _results.push(legendNode.removeChild(n));
    }
    return _results;
  };

  sortedBucketed = function(items) {
    var bucketed, byClass, classItems, item, _i, _len;
    byClass = {};
    bucketed = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      if (byClass[item.constructor.name] == null) {
        bucketed.push(byClass[item.constructor.name] = []);
      }
      classItems = byClass[item.constructor.name];
      classItems.push(item);
    }
    return bucketed;
  };

  window.showInventory = function(inventory, after) {
    var bucketedItems, dismiss, invnode, itemInfo, itemsByLetter, letter, letterCode, onKey, _i, _len;
    invnode = $("<div>").attr('id', 'inventory').addClass('dialog');
    letterCode = 'A'.charCodeAt(0);
    bucketedItems = sortedBucketed(inventory.items);
    itemsByLetter = {};
    for (_i = 0, _len = bucketedItems.length; _i < _len; _i++) {
      itemInfo = bucketedItems[_i];
      letter = String.fromCharCode(letterCode).toLowerCase();
      itemsByLetter[letterCode] = itemInfo;
      $("<div>").addClass("inv-item").text('%s) '.format(letter)).append(inventoryText(itemInfo)).appendTo(invnode);
      letterCode += 1;
    }
    if (!bucketedItems.length) {
      $("<span>").text('(Your pockets are empty.)').appendTo(invnode);
    }
    $(invnode).append($("<div>").addClass('inv-escape').text('ESC) close inventory'));
    $("#game").append(invnode);
    onKey = function(e) {
      var item, keyCode;
      keyCode = e.keyCode;
      if (e.altKey) {
        return;
      }
      if (keyCode === ROT.VK_ESCAPE || keyCode === ROT.VK_I) {
        dismiss();
      } else if (item = itemsByLetter[keyCode]) {
        window.removeEventListener('keydown', onKey);
        showItemDetail(item, inventory, function(closeInventory) {
          window.addEventListener('keydown', onKey);
          if (closeInventory) {
            return dismiss(true);
          }
        });
      } else {
        return;
      }
      return e.preventDefault();
    };
    dismiss = function(takeTurn) {
      window.removeEventListener('keydown', onKey);
      invnode.remove();
      return after(takeTurn);
    };
    return window.addEventListener('keydown', onKey);
  };

  showItemDetail = function(itemInfo, inventory, after) {
    var actionKeycodes, actions, detailnode, dismiss, header, onKey, oneItem, useFunc, _fn, _i, _len, _ref;
    oneItem = itemInfo[0];
    detailnode = $("<div>").attr('id', 'item-detail').addClass('dialog');
    header = itemDescWithQuantity(itemInfo).addClass('item-detail-header').appendTo(detailnode);
    if (oneItem.inventoryDesc) {
      $("<div>").addClass('item-detail-desc').html(oneItem.inventoryDesc()).appendTo(detailnode);
    }
    actions = $("<div>").addClass('item-actions').appendTo(detailnode);
    actionKeycodes = {};
    _ref = oneItem.useFuncs();
    _fn = function(useFunc) {
      var button, keycode, label, shortcutKey, shortcutKeyIndex;
      label = useFunc.label;
      shortcutKeyIndex = 0;
      shortcutKey = label[shortcutKeyIndex];
      keycode = shortcutKey.toUpperCase().charCodeAt(0);
      actionKeycodes[keycode] = function() {
        return useFunc.call(oneItem, inventory);
      };
      return button = $('<div>').addClass('item-action').appendTo(actions).append(document.createTextNode(label.substr(0, shortcutKeyIndex))).append($("<span>").addClass('shortcut-key').text(shortcutKey)).append(document.createTextNode(label.substr(shortcutKeyIndex + 1)));
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      useFunc = _ref[_i];
      _fn(useFunc);
    }
    $("#game").append(detailnode);
    onKey = function(e) {
      var cb, keyCode;
      if (e.altKey) {
        return;
      }
      keyCode = e.keyCode;
      if (keyCode === ROT.VK_ESCAPE) {
        dismiss();
      } else if ((cb = actionKeycodes[keyCode])) {
        cb();
        dismiss(true);
      } else {
        return;
      }
      return e.preventDefault();
    };
    dismiss = function(closeInventory) {
      window.removeEventListener('keydown', onKey);
      detailnode.remove();
      return after(closeInventory);
    };
    return window.addEventListener('keydown', onKey);
  };

  itemDescWithQuantity = function(itemInfo) {
    var oneItem, quantity, span;
    oneItem = itemInfo[0];
    quantity = itemInfo.length;
    span = $("<span>").text(oneItem.statusDesc());
    if (quantity > 1) {
      span.append(document.createTextNode(' '));
      span.append($("<span>").addClass('inv-quantity').text('<%s>'.format(quantity)));
    }
    return span;
  };

  inventoryText = function(itemInfo) {
    var oneItem, span;
    oneItem = itemInfo[0];
    span = $("<span>");
    span.append(entitySpan(oneItem));
    span.append(document.createTextNode(' '));
    span.append(itemDescWithQuantity(itemInfo));
    return span;
  };

}).call(this);
