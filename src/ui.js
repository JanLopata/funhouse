//@ sourceMappingURL=ui.map
// Generated by CoffeeScript 1.6.1
(function() {
  var props, removeAllChildren, uiConstants;

  uiConstants = {
    shakeEffectDuration: 400
  };

  props = {
    bar: function(entity, prop, parentNode) {
      var bar, bottom, classname, later, meter, meterName, name, node, percentage, text, top, wasNew;
      if ((meterName = prop.meter) != null) {
        meter = entity[meterName];
        name = meterName;
        top = meter.value;
        bottom = meter.max;
      } else {
        name = prop.attr;
        top = entity[prop.attr];
        assert(top != null, "entity %s missing expected \"%s\"".format(entity, prop.attr));
        bottom = entity[prop.maxAttr];
        assert(bottom != null, "entity %s missing expected \"%s\"".format(entity, prop.maxAttr));
      }
      percentage = Math.min(1, top / bottom) * 100;
      classname = 'prop-' + name;
      node = $(parentNode).children('.' + classname);
      wasNew = false;
      if (!node.length) {
        node = $("<div>").addClass('progress').addClass(classname);
        bar = $("<div>").addClass('bar').appendTo(node);
        text = $("<div>").addClass('text').text(prop.label).appendTo(node);
        wasNew = true;
      } else {
        bar = node.children('.bar');
      }
      if (prop.color != null) {
        bar.css('background', prop.color);
      }
      later = function() {
        return bar.css('width', percentage + '%');
      };
      if (wasNew) {
        later();
        later = void 0;
      }
      return [node[0], later];
    }
  };

  removeAllChildren = function(node) {
    var _results;
    _results = [];
    while (node.childNodes.length) {
      _results.push(node.removeChild(node.childNodes[0]));
    }
    return _results;
  };

  window.updateLegendNodeForEntity = function(node, entity) {
    var charSpan, header, headerText, later, prop, propFunc, propNode, remove, _i, _len, _ref, _ref1, _ref2, _results;
    header = $(node).children('.entity-header');
    if (!header.length) {
      header = $("<div>").addClass('entity-header').appendTo(node);
    }
    removeAllChildren(header[0]);
    charSpan = document.createElement('span');
    if (entity.color) {
      charSpan.setAttribute('style', 'color: %s;'.format(entity.color));
    }
    charSpan.textContent = entity.char;
    header.append(charSpan);
    headerText = ": %s".format(entity.legendDesc || entity.constructor.name);
    header.append(document.createTextNode(headerText));
    node.appendChild(header[0]);
    if ((_ref = entity.effect) != null ? _ref.damage : void 0) {
      entity.effect.damage = 0;
      $(node).addClass('shake');
      remove = function() {
        return $(node).removeClass('shake');
      };
      setTimeout(remove, uiConstants.shakeEffectDuration);
    }
    _ref1 = entity.legendProps || [];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      prop = _ref1[_i];
      propFunc = props[prop.type];
      _ref2 = propFunc(entity, prop, node), propNode = _ref2[0], later = _ref2[1];
      node.appendChild(propNode);
      if (later) {
        _results.push(setTimeout(later, 0));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  window.updateLegendNodes = function(legendNode, entitiesToShow) {
    var allNodes, entity, id, n, node, seen, toDelete, _i, _j, _len, _len1, _results;
    allNodes = $(legendNode).children('div');
    seen = {};
    for (_i = 0, _len = entitiesToShow.length; _i < _len; _i++) {
      entity = entitiesToShow[_i].entity;
      id = 'entity-' + entity.guid;
      node = document.getElementById(id) || $('<div>').attr('id', id).addClass('legend-entry')[0];
      legendNode.appendChild(node);
      updateLegendNodeForEntity(node, entity);
      seen[id] = true;
    }
    toDelete = (function() {
      var _j, _len1, _ref, _results;
      _ref = legendNode.children;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        n = _ref[_j];
        if (!seen[n.getAttribute('id')]) {
          _results.push(n);
        }
      }
      return _results;
    })();
    _results = [];
    for (_j = 0, _len1 = toDelete.length; _j < _len1; _j++) {
      n = toDelete[_j];
      _results.push(legendNode.removeChild(n));
    }
    return _results;
  };

}).call(this);
